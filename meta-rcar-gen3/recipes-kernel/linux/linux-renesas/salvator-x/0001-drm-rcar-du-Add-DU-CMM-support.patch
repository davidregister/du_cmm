From dd270554525a7cd6bd1f9551ad71faa114601087 Mon Sep 17 00:00:00 2001
From: Takashi Saito <takashi.saitou.ry@renesas.com>
Date: Wed, 16 Dec 2015 15:44:08 +0900
Subject: [PATCH 1/1] drm: rcar-du: Add DU CMM support

Signed-off-by: Takashi Saito <takashi.saitou.ry@renesas.com>
---
 drivers/gpu/drm/rcar-du/Makefile        |    2 +
 drivers/gpu/drm/rcar-du/rcar_du_cmm.c   | 1372 +++++++++++++++++++++++++++++++
 drivers/gpu/drm/rcar-du/rcar_du_crtc.c  |   29 +-
 drivers/gpu/drm/rcar-du/rcar_du_crtc.h  |   32 +
 drivers/gpu/drm/rcar-du/rcar_du_drv.c   |   36 +-
 drivers/gpu/drm/rcar-du/rcar_du_drv.h   |    4 +
 drivers/gpu/drm/rcar-du/rcar_du_group.c |    5 +
 drivers/gpu/drm/rcar-du/rcar_du_regs.h  |   93 +++
 include/uapi/drm/rcar_du_drm.h          |  135 +++
 9 files changed, 1702 insertions(+), 6 deletions(-)
 create mode 100644 drivers/gpu/drm/rcar-du/rcar_du_cmm.c

diff --git a/drivers/gpu/drm/rcar-du/Makefile b/drivers/gpu/drm/rcar-du/Makefile
index 435c81b..7d83e8c 100644
--- a/drivers/gpu/drm/rcar-du/Makefile
+++ b/drivers/gpu/drm/rcar-du/Makefile
@@ -6,6 +6,8 @@ rcar-du-drm-y := rcar_du_crtc.o \
 		 rcar_du_plane.o \
 		 rcar_du_vgacon.o
 
+rcar-du-drm-y += rcar_du_cmm.o
+
 rcar-du-drm-$(CONFIG_DRM_RCAR_HDMI)	+= rcar_du_hdmienc.o
 rcar-du-drm-$(CONFIG_DRM_RCAR_LVDS)	+= rcar_du_lvdsenc.o \
 					   rcar_du_lvdscon.o
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_cmm.c b/drivers/gpu/drm/rcar-du/rcar_du_cmm.c
new file mode 100644
index 0000000..53914be
--- /dev/null
+++ b/drivers/gpu/drm/rcar-du/rcar_du_cmm.c
@@ -0,0 +1,1372 @@
+/*************************************************************************/ /*
+ DU CMM
+
+ Copyright (C) 2016 Renesas Electronics Corporation
+
+ License        Dual MIT/GPLv2
+
+ The contents of this file are subject to the MIT license as set out below.
+
+ Permission is hereby granted, free of charge, to any person obtaining a copy
+ of this software and associated documentation files (the "Software"), to deal
+ in the Software without restriction, including without limitation the rights
+ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ copies of the Software, and to permit persons to whom the Software is
+ furnished to do so, subject to the following conditions:
+
+ The above copyright notice and this permission notice shall be included in
+ all copies or substantial portions of the Software.
+
+ Alternatively, the contents of this file may be used under the terms of
+ the GNU General Public License Version 2 ("GPL") in which case the provisions
+ of GPL are applicable instead of those above.
+
+ If you wish to allow use of your version of this file only under the terms of
+ GPL, and not to allow others to use your version of this file under the terms
+ of the MIT license, indicate your decision by deleting the provisions above
+ and replace them with the notice and other provisions required by GPL as set
+ out in the file called "GPL-COPYING" included in this distribution. If you do
+ not delete the provisions above, a recipient may use your version of this file
+ under the terms of either the MIT license or GPL.
+
+ This License is also included in this distribution in the file called
+ "MIT-COPYING".
+
+ EXCEPT AS OTHERWISE STATED IN A NEGOTIATED AGREEMENT: (A) THE SOFTWARE IS
+ PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
+ BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
+ PURPOSE AND NONINFRINGEMENT; AND (B) IN NO EVENT SHALL THE AUTHORS OR
+ COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+
+ GPLv2:
+ If you wish to use this file under the terms of GPL, following terms are
+ effective.
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; version 2 of the License.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+*/ /*************************************************************************/
+
+#include <linux/workqueue.h>
+
+#include <drm/drmP.h>
+#include <drm/drm_crtc.h>
+#include <drm/drm_crtc_helper.h>
+#include <drm/drm_fb_cma_helper.h>
+#include <drm/drm_gem_cma_helper.h>
+#include <drm/rcar_du_drm.h>
+
+#include "rcar_du_crtc.h"
+#include "rcar_du_drv.h"
+#include "rcar_du_kms.h"
+#include "rcar_du_plane.h"
+#include "rcar_du_regs.h"
+
+/* #define DEBUG_PROCE_TIME 1 */
+
+/* CPF register */
+#define CPG_BASE	0xE6150000
+#define CPG_MSTPSR7	0x000001C4
+#define CPG_SMSTPCR7	0x0000014C
+#define CPG_SRCR7	0x000001CC
+#define CPG_SRSTCLR7	0x0000095C
+
+#define CMM0_CLOCK_BIT (1 << 11)
+#define CMM1_CLOCK_BIT (1 << 10)
+#define CMM2_CLOCK_BIT (1 << 9)
+#define CMM3_CLOCK_BIT (1 << 8)
+
+#define CMM_LUT_NUM 256
+#define CMM_CLU_NUM (17 * 17 * 17)
+#define CMM_HGO_NUM 64
+
+#define EVENT_NUM	30
+
+struct rcar_dma_trans {
+	u32 trans_count;
+	u32 src_addr;
+	u32 dist_addr;
+	u32 control;
+};
+
+struct rcar_du_cmm_pendig_event {
+	struct list_head link;
+	unsigned int event;
+	unsigned long callback_data;
+	void *vaddr;
+};
+
+struct cmm_lut_t {
+	struct list_head list;
+	struct rcar_du_cmm_pendig_event *p;
+	int buf_mode;
+};
+
+struct cmm_clu_t {
+	struct list_head list;
+	struct rcar_du_cmm_pendig_event *p;
+	int buf_mode;
+};
+
+struct cmm_hgo_t {
+	struct list_head list;
+	int reset;
+};
+
+struct rcar_du_cmm_buf_list {
+	struct list_head list;
+	struct drm_gem_cma_object *cma_obj;
+	uint32_t handle;
+};
+
+struct cmm_reg_save {
+#ifdef CONFIG_PM_SLEEP
+	wait_queue_head_t wait;
+
+	u32 *lut_table;
+	u32 *clu_table;
+#endif /* CONFIG_PM_SLEEP */
+
+	u32 cm2_ctl0;	/* CM2_CTL0 */
+	u32 hgo_offset;	/* CMM_HGO_OFFSET */
+	u32 hgo_size;	/* CMM_HGO_SIZE */
+	u32 hgo_mode;	/* CMM_HGO_MODE */
+};
+
+struct rcar_du_cmm {
+	struct rcar_du_crtc *rcrtc;
+
+	/* CMM base address */
+	void __iomem *cmm_base;
+	unsigned long cmm_paddr;
+
+	struct cmm_lut_t lut;
+	struct cmm_clu_t clu;
+	struct cmm_hgo_t hgo;
+
+	struct rcar_du_cmm_pendig_event event[EVENT_NUM];
+	struct list_head link;
+	wait_queue_head_t event_wait;
+	struct list_head empty_list;
+	struct list_head event_list;
+
+	struct mutex lock;
+	struct workqueue_struct *workqueue;
+	struct work_struct work;
+
+	struct cmm_reg_save reg_save;
+
+	bool active;
+	bool dbuf;
+	bool clu_dbuf;
+	bool init;
+};
+
+
+static void *du_cmm_handle_to_vaddr(uint32_t handle);
+
+static LIST_HEAD(cmm_buf_list);
+
+
+static inline u32 rcar_du_cmm_read(struct rcar_du_cmm *du_cmm, u32 reg)
+{
+	return ioread32(du_cmm->cmm_base + reg);
+}
+
+static inline void rcar_du_cmm_write(struct rcar_du_cmm *du_cmm,
+				     u32 reg, u32 data)
+{
+	iowrite32(data, du_cmm->cmm_base + reg);
+}
+
+/* create default CLU table data */
+static inline u32 index_to_clu_data(int index)
+{
+	int r, g, b;
+
+	r = index % 17;
+	index /= 17;
+	g = index % 17;
+	index /= 17;
+	b = index % 17;
+
+	r = (r << 20);
+	if (r > (255 << 16))
+		r = (255 << 16);
+	g = (g << 12);
+	if (g > (255 << 8))
+		g = (255 << 8);
+	b = (b << 4);
+	if (b > (255 << 0))
+		b = (255 << 0);
+
+	return r | g | b;
+}
+
+
+static struct rcar_du_crtc *id_to_rcrtc(struct drm_device *dev, int crtc_id)
+{
+	struct drm_mode_object *obj;
+	struct drm_crtc *crtc;
+
+	obj = drm_mode_object_find(dev, crtc_id, DRM_MODE_OBJECT_CRTC);
+	if (!obj)
+		return NULL;
+
+	crtc = obj_to_crtc(obj);
+
+	return to_rcar_crtc(crtc);
+}
+
+static struct rcar_du_cmm *id_to_cmm(struct drm_device *dev, int crtc_id)
+{
+	struct rcar_du_crtc *rcrtc = id_to_rcrtc(dev, crtc_id);
+	struct rcar_du_cmm *du_cmm;
+
+	if (rcrtc == NULL)
+		return NULL;
+
+	du_cmm = rcrtc->cmm_handle;
+
+	if (du_cmm == NULL)
+		return NULL;
+
+	if (!du_cmm->active)
+		return NULL;
+
+	return du_cmm;
+}
+
+#ifdef DEBUG_PROCE_TIME
+static long long diff_timevals(struct timeval *start, struct timeval *end)
+{
+	return (end->tv_sec * 1000000LL + end->tv_usec) -
+		(start->tv_sec * 1000000LL + start->tv_usec);
+}
+#endif
+
+int rcar_du_cmm_config(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	struct rcar_du_cmm_config *config = (struct rcar_du_cmm_config *)data;
+	struct rcar_du_cmm *du_cmm;
+	u32 cm2_ctl0;
+
+	du_cmm = id_to_cmm(dev, config->crtc_id);
+	if (du_cmm == NULL)
+		return -EINVAL;
+
+	cm2_ctl0 = du_cmm->reg_save.cm2_ctl0;
+	cm2_ctl0 &= ~(CMM_CTL0_TM1_MASK | CMM_CTL0_TM0_MASK |
+		      CMM_CTL0_YC | CMM_CTL0_DBUF | CMM_CTL0_CLUDB);
+
+	switch (config->csc) {
+	case CSC_CONVERT_NONE:
+		break;
+
+	case CSC_CONVERT_BT601_YCbCr240:
+		cm2_ctl0 |= (CMM_CTL0_TM_BT601_YC240 | CMM_CTL0_YC);
+		break;
+
+	case CSC_CONVERT_BT601_YCbCr255:
+		cm2_ctl0 |= (CMM_CTL0_TM_BT601_YC255 | CMM_CTL0_YC);
+		break;
+
+	case CSC_CONVERT_BT709_RGB255:
+		cm2_ctl0 |= (CMM_CTL0_TM_BT709_RG255 | CMM_CTL0_YC);
+		break;
+
+	case CSC_CONVERT_BT709_RGB235:
+		cm2_ctl0 |= (CMM_CTL0_TM_BT709_RG235 | CMM_CTL0_YC);
+		break;
+
+	default:
+		return -EINVAL;
+	}
+
+
+	if (du_cmm->dbuf && du_cmm->clu_dbuf &&
+	    (config->lut_buf == LUT_SINGLE_BUFFER) &&
+	    (config->clu_buf != CLU_SINGLE_BUFFER))
+		return -EINVAL;
+
+	if (du_cmm->dbuf) {
+		switch (config->lut_buf) {
+		case LUT_DOUBLE_BUFFER_AUTO:
+		case LUT_DOUBLE_BUFFER_A:
+		case LUT_DOUBLE_BUFFER_B:
+			cm2_ctl0 |= CMM_CTL0_DBUF;
+		case LUT_SINGLE_BUFFER:
+			break;
+
+		default:
+			return -EINVAL;
+		}
+
+		du_cmm->lut.buf_mode = config->lut_buf;
+	} else {
+		du_cmm->lut.buf_mode = LUT_SINGLE_BUFFER;
+	}
+	if (du_cmm->clu_dbuf) {
+		switch (config->clu_buf) {
+		case CLU_DOUBLE_BUFFER_AUTO:
+		case CLU_DOUBLE_BUFFER_A:
+		case CLU_DOUBLE_BUFFER_B:
+			cm2_ctl0 |= CMM_CTL0_CLUDB;
+		case CLU_SINGLE_BUFFER:
+			break;
+
+		default:
+			return -EINVAL;
+		}
+
+		du_cmm->clu.buf_mode = config->clu_buf;
+	} else {
+		du_cmm->clu.buf_mode = CLU_SINGLE_BUFFER;
+	}
+
+	if (du_cmm->lut.buf_mode == LUT_SINGLE_BUFFER) {
+		if (rcar_du_cmm_read(du_cmm, CM2_CTL1) & CMM_CTL1_BFS)
+			rcar_du_cmm_write(du_cmm, CM2_CTL1, 0);
+	}
+
+	rcar_du_cmm_write(du_cmm, CM2_CTL0, cm2_ctl0);
+	du_cmm->reg_save.cm2_ctl0 = cm2_ctl0;
+
+	return 0;
+}
+
+int rcar_du_cmm_lut_set(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	struct rcar_du_cmm_table *table = (struct rcar_du_cmm_table *)data;
+	struct rcar_du_cmm *du_cmm;
+	int ret = 0;
+	struct rcar_du_cmm_pendig_event *p;
+	void *vaddr;
+
+	du_cmm = id_to_cmm(dev, table->crtc_id);
+	if (du_cmm == NULL)
+		return -EINVAL;
+
+	if (table->buff_len < (CMM_LUT_NUM * 4))
+		return -EINVAL;
+
+	mutex_lock(&du_cmm->lock);
+
+	if (list_empty(&du_cmm->empty_list)) {
+		ret = -EBUSY;
+		goto end;
+	}
+
+	vaddr = du_cmm_handle_to_vaddr(table->buff);
+	if (!vaddr) {
+		ret = -ENOMEM;
+		goto end;
+	}
+
+	p = list_first_entry(&du_cmm->empty_list,
+				struct rcar_du_cmm_pendig_event, link);
+	list_del(&p->link);
+
+	p->vaddr = vaddr;
+	p->event = CMM_EVENT_LUT_DONE;
+	p->callback_data = table->user_data;
+
+	list_add_tail(&p->link, &du_cmm->lut.list);
+
+	if (du_cmm->lut.p) {
+		list_add_tail(&du_cmm->lut.p->link, &du_cmm->event_list);
+		wake_up_interruptible(&du_cmm->event_wait);
+		du_cmm->lut.p = NULL;
+		drm_vblank_put(du_cmm->rcrtc->crtc.dev, du_cmm->rcrtc->index);
+	}
+
+	drm_vblank_get(dev, du_cmm->rcrtc->index);
+
+end:
+	mutex_unlock(&du_cmm->lock);
+
+	return ret;
+}
+
+
+int rcar_du_cmm_clu_set(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	struct rcar_du_cmm_table *table = (struct rcar_du_cmm_table *)data;
+	struct rcar_du_cmm *du_cmm;
+	int ret = 0;
+	struct rcar_du_cmm_pendig_event *p;
+	void *vaddr;
+
+	du_cmm = id_to_cmm(dev, table->crtc_id);
+	if (du_cmm == NULL)
+		return -EINVAL;
+
+	if (table->buff_len < (CMM_CLU_NUM * 4))
+		return -EINVAL;
+
+	mutex_lock(&du_cmm->lock);
+
+	if (list_empty(&du_cmm->empty_list)) {
+		ret = -EBUSY;
+		goto end;
+	}
+
+	vaddr = du_cmm_handle_to_vaddr(table->buff);
+	if (!vaddr) {
+		ret = -ENOMEM;
+		goto end;
+	}
+
+	p = list_first_entry(&du_cmm->empty_list,
+				struct rcar_du_cmm_pendig_event, link);
+	list_del(&p->link);
+
+	p->vaddr = vaddr;
+	p->event = CMM_EVENT_CLU_DONE;
+	p->callback_data = table->user_data;
+
+	list_add_tail(&p->link, &du_cmm->clu.list);
+
+	if (du_cmm->clu.p) {
+		list_add_tail(&du_cmm->clu.p->link, &du_cmm->event_list);
+		wake_up_interruptible(&du_cmm->event_wait);
+		du_cmm->clu.p = NULL;
+		drm_vblank_put(du_cmm->rcrtc->crtc.dev, du_cmm->rcrtc->index);
+	}
+
+	drm_vblank_get(dev, du_cmm->rcrtc->index);
+
+end:
+	mutex_unlock(&du_cmm->lock);
+
+	return ret;
+}
+
+int rcar_du_cmm_hgo_set(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	struct rcar_du_cmm_hgo_config *hgo =
+				(struct rcar_du_cmm_hgo_config *)data;
+	struct rcar_du_cmm *du_cmm;
+	const struct drm_display_mode *mode;
+	u32 cm2_ctl0;
+
+	du_cmm = id_to_cmm(dev, hgo->crtc_id);
+	if (du_cmm == NULL)
+		return -EINVAL;
+
+	mode = &du_cmm->rcrtc->crtc.mode;
+
+	if ((mode->hdisplay < (hgo->x_offset + hgo->width)) ||
+	    (mode->vdisplay < (hgo->y_offset + hgo->height)))
+		return -EINVAL;
+
+	if (hgo->mode & ~CMM_HGO_MODE_MASK)
+		return -EINVAL;
+
+	mutex_lock(&du_cmm->lock);
+
+	rcar_du_cmm_write(du_cmm, CMM_HGO_OFFSET,
+		(hgo->x_offset << 16) | (hgo->y_offset << 0));
+	rcar_du_cmm_write(du_cmm, CMM_HGO_SIZE,
+		(hgo->width << 16) | (hgo->height << 0));
+	rcar_du_cmm_write(du_cmm, CMM_HGO_MODE, hgo->mode);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB_TH, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB0_H, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB0_V, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB1_H, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB1_V, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB2_H, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB2_V, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB3_H, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB3_V, 0);
+
+	cm2_ctl0 = du_cmm->reg_save.cm2_ctl0;
+	if (hgo->ctrl & HGO_CTRL_BEFORE_LUT)
+		cm2_ctl0 |= CMM_CTL0_HISTS;
+	else
+		cm2_ctl0 &= ~CMM_CTL0_HISTS;
+
+	rcar_du_cmm_write(du_cmm, CM2_CTL0, cm2_ctl0);
+
+	du_cmm->reg_save.cm2_ctl0 = cm2_ctl0;
+	du_cmm->reg_save.hgo_offset =
+		(hgo->x_offset << 16) | (hgo->y_offset << 0);
+	du_cmm->reg_save.hgo_size =
+		(hgo->width << 16) | (hgo->height << 0);
+	du_cmm->reg_save.hgo_mode = hgo->mode;
+
+	if (du_cmm->hgo.reset == 0) {
+		du_cmm->hgo.reset = 1;
+		drm_vblank_get(dev, du_cmm->rcrtc->index);
+	}
+
+	mutex_unlock(&du_cmm->lock);
+
+	return 0;
+}
+
+int rcar_du_cmm_hgo_get(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	struct rcar_du_cmm_table *table = (struct rcar_du_cmm_table *)data;
+	struct rcar_du_cmm *du_cmm;
+	int ret = 0;
+	int i;
+	struct rcar_du_cmm_pendig_event *p[2] = {NULL, NULL};
+	void *vaddr;
+
+	du_cmm = id_to_cmm(dev, table->crtc_id);
+	if (du_cmm == NULL)
+		return -EINVAL;
+
+	if (table->buff_len < (CMM_HGO_NUM * 4 * 3))
+		return -EINVAL;
+
+	mutex_lock(&du_cmm->lock);
+
+	vaddr = du_cmm_handle_to_vaddr(table->buff);
+	if (!vaddr) {
+		ret = -ENOMEM;
+		goto end;
+	}
+
+	for (i = 0; i < 2; i++) {
+		if (list_empty(&du_cmm->empty_list)) {
+			if (p[0] != NULL)
+				list_add_tail(&p[0]->link, &du_cmm->empty_list);
+			ret = -EBUSY;
+			goto end;
+		}
+
+		p[i] = list_first_entry(&du_cmm->empty_list,
+				     struct rcar_du_cmm_pendig_event, link);
+		list_del(&p[i]->link);
+	}
+
+	/* histogram read start event */
+	p[0]->vaddr = NULL;
+	p[0]->event = CMM_EVENT_HGO_START;
+	p[0]->callback_data = table->user_data;
+	list_add_tail(&p[0]->link, &du_cmm->hgo.list);
+
+	/* histogram read end event */
+	p[1]->vaddr = vaddr;
+	p[1]->event = CMM_EVENT_HGO_DONE;
+	p[1]->callback_data = table->user_data;
+	list_add_tail(&p[1]->link, &du_cmm->hgo.list);
+
+	/* start DU Vsync interrupt */
+	drm_vblank_get(dev, du_cmm->rcrtc->index);
+
+end:
+	mutex_unlock(&du_cmm->lock);
+
+	return ret;
+}
+
+int rcar_du_cmm_hgo_start(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	int crtc_id = *(int *)data;
+	struct rcar_du_cmm *du_cmm;
+
+	du_cmm = id_to_cmm(dev, crtc_id);
+	if (du_cmm == NULL)
+		return -EINVAL;
+
+	mutex_lock(&du_cmm->lock);
+
+	if (du_cmm->hgo.reset == 0) {
+		du_cmm->hgo.reset = 1;
+		drm_vblank_get(dev, du_cmm->rcrtc->index);
+	}
+
+	mutex_unlock(&du_cmm->lock);
+
+	return 0;
+}
+
+int rcar_du_cmm_wait_event(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	int ret;
+	struct rcar_du_cmm_event *event = (struct rcar_du_cmm_event *)data;
+	struct rcar_du_cmm *du_cmm;
+	struct rcar_du_cmm_pendig_event *p;
+
+	du_cmm = id_to_cmm(dev, event->crtc_id);
+	if (du_cmm == NULL)
+		return -EINVAL;
+
+	ret = wait_event_interruptible(du_cmm->event_wait,
+				       !list_empty(&du_cmm->event_list));
+	if (ret < 0)
+		return ret;
+
+	mutex_lock(&du_cmm->lock);
+	p = list_first_entry(&du_cmm->event_list,
+			     struct rcar_du_cmm_pendig_event, link);
+	list_del(&p->link);
+	mutex_unlock(&du_cmm->lock);
+
+	event->event = p->event;
+	event->callback_data = p->callback_data;
+
+	list_add_tail(&p->link, &du_cmm->empty_list);
+
+	return 0;
+}
+
+static void du_cmm_clk(int index, bool on)
+{
+	const uint32_t cmm_clk_bit[] = {CMM0_CLOCK_BIT, CMM1_CLOCK_BIT,
+					CMM2_CLOCK_BIT, CMM3_CLOCK_BIT};
+	void __iomem *cpg_reg;
+	uint32_t srstclr7_data;
+
+	if (index >= 4)
+		return;
+
+	cpg_reg = ioremap_nocache(CPG_BASE, 0x1000);
+	srstclr7_data = ioread32(cpg_reg + CPG_MSTPSR7);
+	if (on)
+		srstclr7_data &= ~cmm_clk_bit[index];
+	else
+		srstclr7_data |= cmm_clk_bit[index];
+	iowrite32(srstclr7_data, cpg_reg + CPG_SMSTPCR7);
+	iounmap(cpg_reg);
+}
+
+int rcar_du_cmm_start_stop(struct rcar_du_crtc *rcrtc, bool on)
+{
+	struct rcar_du_cmm *du_cmm = rcrtc->cmm_handle;
+	int i;
+	u32 table_data;
+
+	if (du_cmm == NULL)
+		return -EINVAL;
+
+	mutex_lock(&du_cmm->lock);
+
+	if (!on) {
+		du_cmm->active = false;
+
+		rcar_du_cmm_write(du_cmm, CMM_LUT_CTRL, 0x00000000);
+		rcar_du_cmm_write(du_cmm, CMM_CLU_CTRL, 0x00000000);
+
+		du_cmm_clk(rcrtc->index, false);
+
+		goto end;
+	}
+
+	du_cmm_clk(rcrtc->index, true);
+
+	if (du_cmm->init)
+		goto init_done;
+
+	du_cmm->init = true;
+
+	rcar_du_cmm_write(du_cmm, CM2_CTL0, du_cmm->reg_save.cm2_ctl0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_OFFSET, du_cmm->reg_save.hgo_offset);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_SIZE, du_cmm->reg_save.hgo_size);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_MODE, du_cmm->reg_save.hgo_mode);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB_TH, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB0_H, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB0_V, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB1_H, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB1_V, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB2_H, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB2_V, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB3_H, 0);
+	rcar_du_cmm_write(du_cmm, CMM_HGO_LB3_V, 0);
+
+	/* init color table */
+	for (i = 0; i < CMM_LUT_NUM; i++) {
+	#ifdef CONFIG_PM_SLEEP
+		table_data = du_cmm->reg_save.lut_table[i];
+	#else
+		table_data = ((i << 16) | (i << 8) | (i << 0));
+	#endif /* CONFIG_PM_SLEEP */
+		rcar_du_cmm_write(du_cmm, CMM_LUT_TBLA_n(i), table_data);
+
+		if (du_cmm->dbuf)
+			rcar_du_cmm_write(du_cmm, CMM_LUT_TBLB_n(i),
+				table_data);
+	}
+
+	rcar_du_cmm_write(du_cmm, CMM_CLU_CTRL,
+		CMM_CLU_CTRL_AAI | CMM_CLU_CTRL_MVS);
+
+	rcar_du_cmm_write(du_cmm, CMM_CLU_ADDR, 0);
+	if (du_cmm->clu_dbuf)
+		rcar_du_cmm_write(du_cmm, CMM_CLU_ADDR2, 0);
+
+	for (i = 0; i < CMM_CLU_NUM; i++) {
+	#ifdef CONFIG_PM_SLEEP
+		table_data = du_cmm->reg_save.clu_table[i];
+	#else
+		table_data = index_to_clu_data(i);
+	#endif /* CONFIG_PM_SLEEP */
+		rcar_du_cmm_write(du_cmm, CMM_CLU_DATA, table_data);
+
+		if (du_cmm->dbuf)
+			rcar_du_cmm_write(du_cmm, CMM_CLU_DATA2,
+				table_data);
+	}
+
+init_done:
+	/* enable color table */
+	rcar_du_cmm_write(du_cmm, CMM_LUT_CTRL, CMM_LUT_CTRL_EN);
+	rcar_du_cmm_write(du_cmm, CMM_CLU_CTRL,
+		CMM_CLU_CTRL_AAI | CMM_CLU_CTRL_MVS | CMM_CLU_CTRL_EN);
+
+	du_cmm->active = true;
+end:
+	mutex_unlock(&du_cmm->lock);
+
+	return 0;
+}
+
+
+/* pop LUT que */
+static int lut_pop_locked(struct rcar_du_cmm *du_cmm,
+			  struct rcar_du_cmm_pendig_event **p,
+			  bool *done)
+{
+	struct rcar_du_cmm_pendig_event *_p = NULL;
+
+	*done = false;
+
+	if (list_empty(&du_cmm->lut.list)) {
+		/* prev lut table */
+		if (du_cmm->lut.p) {
+			_p = du_cmm->lut.p;
+			*done = true;
+			drm_vblank_put(du_cmm->rcrtc->crtc.dev,
+					du_cmm->rcrtc->index);
+		}
+	} else {
+		_p = list_first_entry(&du_cmm->lut.list,
+				     struct rcar_du_cmm_pendig_event, link);
+		list_del(&_p->link);
+		if (!list_empty(&du_cmm->lut.list) ||
+		    (du_cmm->lut.buf_mode != LUT_DOUBLE_BUFFER_AUTO)) {
+			*done = true;
+			drm_vblank_put(du_cmm->rcrtc->crtc.dev,
+					du_cmm->rcrtc->index);
+		}
+
+		/* prev lut table */
+		if (du_cmm->lut.p) {
+			list_add_tail(&du_cmm->lut.p->link,
+					&du_cmm->event_list);
+			wake_up_interruptible(&du_cmm->event_wait);
+			drm_vblank_put(du_cmm->rcrtc->crtc.dev,
+					du_cmm->rcrtc->index);
+		}
+	}
+
+	if (*done)
+		du_cmm->lut.p = NULL;
+	else
+		du_cmm->lut.p = _p;
+
+	*p = _p;
+
+	return 0;
+}
+
+/* set 1D look up table */
+static int lut_set(struct rcar_du_cmm *du_cmm,
+		   struct rcar_du_cmm_pendig_event *p,
+		   bool done)
+{
+	int i;
+	uint32_t lut_base;
+	uint32_t *lut_buf;
+
+	if (p == NULL)
+		return 0; /* skip */
+
+	/* set LUT */
+	switch (du_cmm->lut.buf_mode) {
+	case LUT_DOUBLE_BUFFER_A:
+	case LUT_SINGLE_BUFFER:
+		lut_base = CMM_LUT_TBLA_n(0);
+		break;
+
+	case LUT_DOUBLE_BUFFER_AUTO:
+		if (rcar_du_cmm_read(du_cmm, CM2_CTL1) & CMM_CTL1_BFS) {
+			lut_base = CMM_LUT_TBLA_n(0);
+			break;
+		}
+	case LUT_DOUBLE_BUFFER_B:
+		lut_base = CMM_LUT_TBLB_n(0);
+		break;
+
+	default:
+		return -EINVAL;
+	}
+
+	lut_buf = p->vaddr;
+	for (i = 0; i < CMM_LUT_NUM; i++)
+		rcar_du_cmm_write(du_cmm, lut_base + i * 4, lut_buf[i]);
+
+	if (done) {
+		list_add_tail(&p->link, &du_cmm->event_list);
+		wake_up_interruptible(&du_cmm->event_wait);
+	}
+
+	return 0;
+}
+
+/* pop CLU que */
+static int clu_pop_locked(struct rcar_du_cmm *du_cmm,
+			  struct rcar_du_cmm_pendig_event **p,
+			  bool *done)
+{
+	struct rcar_du_cmm_pendig_event *_p = NULL;
+
+	*done = false;
+
+	if (list_empty(&du_cmm->clu.list)) {
+		/* prev clu table */
+		if (du_cmm->clu.p) {
+			_p = du_cmm->clu.p;
+			*done = true;
+			drm_vblank_put(du_cmm->rcrtc->crtc.dev,
+					du_cmm->rcrtc->index);
+		}
+	} else {
+		_p = list_first_entry(&du_cmm->clu.list,
+				     struct rcar_du_cmm_pendig_event, link);
+		list_del(&_p->link);
+		if (!list_empty(&du_cmm->clu.list) ||
+		    (du_cmm->clu.buf_mode != CLU_DOUBLE_BUFFER_AUTO)) {
+			*done = true;
+			drm_vblank_put(du_cmm->rcrtc->crtc.dev,
+					du_cmm->rcrtc->index);
+		}
+
+		/* prev clu table */
+		if (du_cmm->clu.p) {
+			list_add_tail(&du_cmm->clu.p->link,
+					&du_cmm->event_list);
+			wake_up_interruptible(&du_cmm->event_wait);
+			drm_vblank_put(du_cmm->rcrtc->crtc.dev,
+					du_cmm->rcrtc->index);
+		}
+	}
+
+	if (*done)
+		du_cmm->clu.p = NULL;
+	else
+		du_cmm->clu.p = _p;
+
+	*p = _p;
+
+	return 0;
+}
+
+/* set 3D look up table */
+static int clu_set(struct rcar_du_cmm *du_cmm,
+		   struct rcar_du_cmm_pendig_event *p,
+		   bool done)
+{
+	int i;
+	uint32_t addr_reg, data_reg;
+	uint32_t *clu_buf;
+
+	if (p == NULL)
+		return 0; /* skip */
+
+	/* set LUT */
+	switch (du_cmm->clu.buf_mode) {
+	case CLU_DOUBLE_BUFFER_A:
+	case CLU_SINGLE_BUFFER:
+		addr_reg = CMM_CLU_ADDR;
+		data_reg = CMM_CLU_DATA;
+		break;
+
+	case CLU_DOUBLE_BUFFER_AUTO:
+		if (rcar_du_cmm_read(du_cmm, CM2_CTL1) & CMM_CTL1_BFS) {
+			addr_reg = CMM_CLU_ADDR;
+			data_reg = CMM_CLU_DATA;
+			break;
+		}
+	case CLU_DOUBLE_BUFFER_B:
+		addr_reg = CMM_CLU_ADDR2;
+		data_reg = CMM_CLU_DATA2;
+		break;
+
+	default:
+		return -EINVAL;
+	}
+
+	clu_buf = p->vaddr;
+	rcar_du_cmm_write(du_cmm, addr_reg, 0);
+	for (i = 0; i < CMM_CLU_NUM; i++)
+		rcar_du_cmm_write(du_cmm, data_reg, clu_buf[i]);
+
+	if (done) {
+		list_add_tail(&p->link, &du_cmm->event_list);
+		wake_up_interruptible(&du_cmm->event_wait);
+	}
+
+	return 0;
+}
+
+/* pop HGO que */
+static int hgo_pop_locked(struct rcar_du_cmm *du_cmm,
+			  struct rcar_du_cmm_pendig_event **p,
+			  bool *reset)
+{
+	struct rcar_du_cmm_pendig_event *_p[2] = {NULL, };
+
+	int i;
+
+	*reset = false;
+
+	if (!list_empty(&du_cmm->hgo.list)) {
+		for (i = 0; i < 2; i++) {
+			_p[i] = list_first_entry(&du_cmm->hgo.list,
+					struct rcar_du_cmm_pendig_event, link);
+			list_del(&_p[i]->link);
+		}
+		drm_vblank_put(du_cmm->rcrtc->crtc.dev, du_cmm->rcrtc->index);
+	}
+
+	if (du_cmm->hgo.reset) {
+		drm_vblank_put(du_cmm->rcrtc->crtc.dev, du_cmm->rcrtc->index);
+		du_cmm->hgo.reset = 0;
+		*reset = true;
+	}
+
+	p[0] = _p[0];
+	p[1] = _p[1];
+
+	return 0;
+}
+
+
+/* get histogram */
+static int hgo_get(struct rcar_du_cmm *du_cmm,
+		   struct rcar_du_cmm_pendig_event *p_hgo[],
+		   bool need_reset)
+{
+	int i, j;
+	const u32 histo_offset[3] = {
+		CMM_HGO_R_HISTO_n(0),
+		CMM_HGO_G_HISTO_n(0),
+		CMM_HGO_B_HISTO_n(0),
+	};
+
+	if (p_hgo[0] == NULL) {
+		if (need_reset)
+			goto hgo_reset;
+
+		return 0; /* skip */
+	}
+
+	list_add_tail(&p_hgo[0]->link, &du_cmm->event_list);
+	wake_up_interruptible(&du_cmm->event_wait);
+
+	for (i = 0; i < 3; i++) {
+		uint32_t *hgo_buf = p_hgo[1]->vaddr + CMM_HGO_NUM * 4 * i;
+
+		for (j = 0; j < CMM_HGO_NUM; j++)
+			hgo_buf[j] = rcar_du_cmm_read(du_cmm,
+						histo_offset[i] + j * 4);
+	}
+
+	list_add_tail(&p_hgo[1]->link, &du_cmm->event_list);
+	wake_up_interruptible(&du_cmm->event_wait);
+
+hgo_reset:
+	rcar_du_cmm_write(du_cmm, CMM_HGO_REGRST, CMM_HGO_REGRST_RCLEA);
+
+	return 0;
+}
+
+
+
+static void du_cmm_work(struct work_struct *work)
+{
+	struct rcar_du_cmm *du_cmm =
+			container_of(work, struct rcar_du_cmm, work);
+	struct rcar_du_cmm_pendig_event *p_lut;
+	struct rcar_du_cmm_pendig_event *p_clu;
+	struct rcar_du_cmm_pendig_event *p_hgo[2];
+	bool lut_done, clu_done, hgo_reset;
+#ifdef DEBUG_PROCE_TIME
+	struct timeval start_time, end_time;
+	unsigned long lut_time, clu_time, hgo_time;
+#endif
+
+	mutex_lock(&du_cmm->lock);
+
+	lut_pop_locked(du_cmm, &p_lut, &lut_done);
+	clu_pop_locked(du_cmm, &p_clu, &clu_done);
+	hgo_pop_locked(du_cmm, p_hgo, &hgo_reset);
+
+	mutex_unlock(&du_cmm->lock);
+
+	/* set LUT */
+#ifdef DEBUG_PROCE_TIME
+	do_gettimeofday(&start_time);
+#endif
+	lut_set(du_cmm, p_lut, lut_done);
+#ifdef DEBUG_PROCE_TIME
+	do_gettimeofday(&end_time);
+	lut_time = (long)diff_timevals(&start_time, &end_time);
+#endif
+
+	/* set CLU */
+#ifdef DEBUG_PROCE_TIME
+	do_gettimeofday(&start_time);
+#endif
+	clu_set(du_cmm, p_clu, clu_done);
+#ifdef DEBUG_PROCE_TIME
+	do_gettimeofday(&end_time);
+	clu_time = (long)diff_timevals(&start_time, &end_time);
+#endif
+
+	/* get HGO */
+#ifdef DEBUG_PROCE_TIME
+	do_gettimeofday(&start_time);
+#endif
+	hgo_get(du_cmm, p_hgo, hgo_reset);
+#ifdef DEBUG_PROCE_TIME
+	do_gettimeofday(&end_time);
+	hgo_time = (long)diff_timevals(&start_time, &end_time);
+#endif
+
+#ifdef CONFIG_PM_SLEEP
+	wake_up_interruptible(&du_cmm->reg_save.wait);
+#endif /* CONFIG_PM_SLEEP */
+
+#ifdef DEBUG_PROCE_TIME
+	{
+		struct rcar_du_device *rcdu = du_cmm->rcrtc->group->dev;
+
+		if (p_lut)
+			dev_info(rcdu->dev, "LUT %ld usec.\n", lut_time);
+		if (p_clu)
+			dev_info(rcdu->dev, "LUT %ld usec.\n", clu_time);
+		if (p_hgo[0])
+			dev_info(rcdu->dev, "HGO %ld usec.\n", hgo_time);
+	}
+#endif
+}
+
+static int du_cmm_que_empty(struct rcar_du_cmm *du_cmm)
+{
+	if (list_empty(&du_cmm->lut.list) && !du_cmm->lut.p &&
+	    list_empty(&du_cmm->clu.list) && !du_cmm->clu.p &&
+	    list_empty(&du_cmm->hgo.list) && !du_cmm->hgo.reset)
+		return 1;
+
+	return 0;
+}
+
+void rcar_du_cmm_kick(struct rcar_du_crtc *rcrtc)
+{
+	struct rcar_du_cmm *du_cmm = rcrtc->cmm_handle;
+
+	if (du_cmm == NULL)
+		return;
+
+	if (!du_cmm_que_empty(du_cmm))
+		queue_work(du_cmm->workqueue, &du_cmm->work);
+}
+
+static void *du_cmm_handle_to_vaddr(uint32_t handle)
+{
+	struct rcar_du_cmm_buf_list *buf_list;
+	void *ptr = NULL;
+
+	list_for_each_entry(buf_list, &cmm_buf_list, list) {
+		if (buf_list->handle == handle) {
+			ptr = buf_list->cma_obj->vaddr;
+			break;
+		}
+	}
+
+	return ptr;
+}
+
+DEFINE_MUTEX(du_cmm_buf_lock);
+
+int rcar_du_cmm_alloc(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	struct rcar_du_cmm_buf *buf = (struct rcar_du_cmm_buf *)data;
+	struct drm_gem_cma_object *cma_obj;
+	struct drm_gem_object *gem_obj;
+	uint32_t handle;
+	u64 offset;
+	int ret = 0;
+	struct rcar_du_cmm_buf_list *buf_list;
+
+	buf->handle = 0;
+
+	buf_list = kzalloc(sizeof(*buf_list), GFP_KERNEL);
+	if (buf_list == NULL)
+		return -ENOMEM;
+
+	mutex_lock(&du_cmm_buf_lock);
+
+	/* create buffer */
+	cma_obj = drm_gem_cma_create(dev, buf->size);
+	if (IS_ERR(cma_obj)) {
+		kfree(buf_list);
+		ret = -ENOMEM;
+		goto end;
+	}
+
+	gem_obj = &cma_obj->base;
+
+	ret = drm_gem_handle_create(file_priv, gem_obj, &handle);
+	if (ret) {
+		kfree(buf_list);
+		drm_gem_cma_free_object(gem_obj);
+		ret = -ENOMEM;
+		goto end;
+	}
+
+	drm_gem_object_unreference_unlocked(gem_obj);
+
+	drm_gem_cma_dumb_map_offset(file_priv, dev, handle, &offset);
+
+	/* set return value */
+	buf->handle = handle;
+	buf->mmap_offset = offset;
+	buf->phy_addr = cma_obj->paddr;
+
+	/* add list */
+	buf_list->cma_obj = cma_obj;
+	buf_list->handle = handle;
+	list_add_tail(&buf_list->list, &cmm_buf_list);
+
+end:
+	mutex_unlock(&du_cmm_buf_lock);
+
+	return ret;
+}
+
+#ifdef CONFIG_PM_SLEEP
+int rcar_du_cmm_pm_suspend(struct rcar_du_crtc *rcrtc)
+{
+	struct rcar_du_cmm *du_cmm = rcrtc->cmm_handle;
+	struct rcar_du_device *rcdu = rcrtc->group->dev;
+	int i, j, k, index;
+	int ret;
+
+	ret = wait_event_timeout(du_cmm->reg_save.wait,
+				 du_cmm_que_empty(du_cmm),
+				 msecs_to_jiffies(500));
+	if (ret == 0)
+		dev_err(rcdu->dev, "rcar-du cmm suspend : timeout\n");
+
+	if (!du_cmm->init)
+		return 0;
+
+	du_cmm->init = false;
+
+	if (!du_cmm->active)
+		du_cmm_clk(rcrtc->index, true);
+
+	/* table save */
+	for (i = 0; i < CMM_LUT_NUM; i++) {
+		du_cmm->reg_save.lut_table[i] =
+			rcar_du_cmm_read(du_cmm, CMM_LUT_TBLA_n(i));
+	}
+
+	index = 0;
+	for (i = 0; i < 17; i++) {
+		for (j = 0; j < 17; j++) {
+			for (k = 0; k < 17; k++) {
+				rcar_du_cmm_write(du_cmm, CMM_CLU_ADDR,
+					(i << 16) | (j << 8) | (k << 0));
+				du_cmm->reg_save.clu_table[index++] =
+					rcar_du_cmm_read(du_cmm, CMM_CLU_DATA);
+			}
+		}
+	}
+
+	if (!du_cmm->active)
+		du_cmm_clk(rcrtc->index, false);
+
+	return 0;
+}
+
+int rcar_du_cmm_pm_resume(struct rcar_du_crtc *rcrtc)
+{
+	/* none */
+	return 0;
+}
+
+#endif /* CONFIG_PM_SLEEP */
+
+
+
+int rcar_du_cmm_free(struct drm_device *dev, void *data,
+			struct drm_file *file_priv)
+{
+	int ret;
+	struct rcar_du_cmm_buf *buf = (struct rcar_du_cmm_buf *)data;
+	struct rcar_du_cmm_buf_list *buf_list;
+	int find = 0;
+
+	mutex_lock(&du_cmm_buf_lock);
+
+	list_for_each_entry(buf_list, &cmm_buf_list, list) {
+		if (buf_list->handle == buf->handle) {
+			find = 1;
+			break;
+		}
+	}
+
+	if (!find) {
+		ret = 0;
+		goto end;
+	}
+
+	list_del(&buf_list->list);
+	kfree(buf_list);
+
+	ret = drm_gem_handle_delete(file_priv, buf->handle);
+
+end:
+	mutex_unlock(&du_cmm_buf_lock);
+
+	return ret;
+}
+
+
+
+int rcar_du_cmm_init(struct rcar_du_crtc *rcrtc)
+{
+	struct rcar_du_cmm *du_cmm;
+	int ret;
+	int i;
+	const uint32_t cmm_addr[] = {CMM0_ADDR, CMM1_ADDR,
+				     CMM2_ADDR, CMM3_ADDR};
+	struct rcar_du_device *rcdu = rcrtc->group->dev;
+	char name[64];
+
+	if (!rcar_du_has(rcdu, RCAR_DU_FEATURE_CMM))
+		return 0;
+
+	du_cmm = devm_kzalloc(rcdu->dev, sizeof(*du_cmm), GFP_KERNEL);
+	if (du_cmm == NULL) {
+		ret = -ENOMEM;
+		goto error_alloc;
+	}
+
+	/* DU-CMM mapping */
+	du_cmm->cmm_paddr = cmm_addr[rcrtc->index];
+	du_cmm->cmm_base = ioremap_nocache(du_cmm->cmm_paddr, CMM_SIZE);
+	if (IS_ERR(du_cmm->cmm_base)) {
+		dev_err(rcdu->dev, "rcar-du cmm init : error mapping cmm\n");
+		ret = PTR_ERR(du_cmm->cmm_base);
+		goto error_mapping_cmm;
+	}
+
+	du_cmm->rcrtc = rcrtc;
+
+	du_cmm->hgo.reset = 0;
+	du_cmm->reg_save.cm2_ctl0 = 0;
+	du_cmm->reg_save.hgo_offset = 0;
+	du_cmm->reg_save.hgo_size = 0;
+	du_cmm->reg_save.hgo_mode = 0;
+
+	du_cmm->dbuf = rcar_du_has(rcdu, RCAR_DU_FEATURE_CMM_LUT_DBUF);
+	if (du_cmm->dbuf) {
+		du_cmm->lut.buf_mode = LUT_DOUBLE_BUFFER_AUTO;
+		du_cmm->reg_save.cm2_ctl0 |= CMM_CTL0_DBUF;
+	} else {
+		du_cmm->lut.buf_mode = LUT_SINGLE_BUFFER;
+	}
+
+	du_cmm->clu_dbuf = rcar_du_has(rcdu, RCAR_DU_FEATURE_CMM_CLU_DBUF);
+	if (du_cmm->clu_dbuf) {
+		du_cmm->clu.buf_mode = CLU_DOUBLE_BUFFER_AUTO;
+		du_cmm->reg_save.cm2_ctl0 |= CMM_CTL0_CLUDB;
+	} else {
+		du_cmm->clu.buf_mode = CLU_SINGLE_BUFFER;
+	}
+
+#ifdef CONFIG_PM_SLEEP
+	du_cmm->reg_save.lut_table =
+		devm_kzalloc(rcdu->dev, CMM_LUT_NUM * 4, GFP_KERNEL);
+	if (du_cmm->reg_save.lut_table == NULL) {
+		ret = -ENOMEM;
+		goto error_lut_reg_save_buf;
+	}
+	for (i = 0; i < CMM_LUT_NUM; i++)
+		du_cmm->reg_save.lut_table[i] = (i << 16) | (i << 8) | (i << 0);
+
+	du_cmm->reg_save.clu_table =
+		devm_kzalloc(rcdu->dev, CMM_CLU_NUM * 4, GFP_KERNEL);
+	if (du_cmm->reg_save.clu_table == NULL) {
+		ret = -ENOMEM;
+		goto error_clu_reg_save_buf;
+	}
+	for (i = 0; i < CMM_CLU_NUM; i++)
+		du_cmm->reg_save.clu_table[i] = index_to_clu_data(i);
+
+	init_waitqueue_head(&du_cmm->reg_save.wait);
+#endif /* CONFIG_PM_SLEEP */
+
+	du_cmm->active = false;
+	du_cmm->init = false;
+
+	INIT_LIST_HEAD(&du_cmm->event_list);
+	INIT_LIST_HEAD(&du_cmm->empty_list);
+	INIT_LIST_HEAD(&du_cmm->lut.list);
+	du_cmm->lut.p = NULL;
+	du_cmm->clu.p = NULL;
+	INIT_LIST_HEAD(&du_cmm->clu.list);
+	INIT_LIST_HEAD(&du_cmm->hgo.list);
+
+	init_waitqueue_head(&du_cmm->event_wait);
+	for (i = 0; i < EVENT_NUM; i++)
+		list_add_tail(&du_cmm->event[i].link, &du_cmm->empty_list);
+
+	mutex_init(&du_cmm->lock);
+	sprintf(name, "du-cmm%d", rcrtc->index);
+	du_cmm->workqueue = create_singlethread_workqueue(name);
+	INIT_WORK(&du_cmm->work, du_cmm_work);
+
+	rcrtc->cmm_handle = du_cmm;
+
+	dev_info(rcdu->dev, "DU%d use CMM(%s buffer)\n",
+		rcrtc->index, du_cmm->dbuf ? "Double" : "Single");
+
+	return 0;
+
+#ifdef CONFIG_PM_SLEEP
+error_clu_reg_save_buf:
+error_lut_reg_save_buf:
+#endif /* CONFIG_PM_SLEEP */
+error_mapping_cmm:
+error_alloc:
+	return ret;
+}
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_crtc.c b/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
index 7ece810..9b9a5a0 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_crtc.c
@@ -269,9 +269,20 @@ static void rcar_du_crtc_set_display_timing(struct rcar_du_crtc *rcrtc)
 	rcar_du_crtc_write(rcrtc, DSMR, value);
 
 	/* Display timings */
-	rcar_du_crtc_write(rcrtc, HDSR, mode->htotal - mode->hsync_start - 19);
-	rcar_du_crtc_write(rcrtc, HDER, mode->htotal - mode->hsync_start +
-					mode->hdisplay - 19);
+
+	if (rcar_du_has(rcrtc->group->dev, RCAR_DU_FEATURE_CMM)) {
+		rcar_du_crtc_write(rcrtc, HDSR,
+			mode->htotal - mode->hsync_start - 19 - 25);
+		rcar_du_crtc_write(rcrtc, HDER,
+			mode->htotal - mode->hsync_start +
+			mode->hdisplay - 19 - 25);
+	} else {
+		rcar_du_crtc_write(rcrtc, HDSR,
+			mode->htotal - mode->hsync_start - 19);
+		rcar_du_crtc_write(rcrtc,
+			HDER, mode->htotal - mode->hsync_start +
+			mode->hdisplay - 19);
+	}
 	rcar_du_crtc_write(rcrtc, HSWR, mode->hsync_end -
 					mode->hsync_start - 1);
 	rcar_du_crtc_write(rcrtc, HCR,  mode->htotal - 1);
@@ -503,6 +514,9 @@ static void rcar_du_crtc_start(struct rcar_du_crtc *rcrtc)
 	/* Turn vertical blanking interrupt reporting back on. */
 	drm_crtc_vblank_on(crtc);
 
+	if (rcar_du_has(rcrtc->group->dev, RCAR_DU_FEATURE_CMM))
+		rcar_du_cmm_start_stop(rcrtc, true);
+
 	rcrtc->started = true;
 }
 
@@ -513,6 +527,9 @@ static void rcar_du_crtc_stop(struct rcar_du_crtc *rcrtc)
 	if (!rcrtc->started)
 		return;
 
+	if (rcar_du_has(rcrtc->group->dev, RCAR_DU_FEATURE_CMM))
+		rcar_du_cmm_start_stop(rcrtc, false);
+
 	/* Disable all planes and wait for the change to take effect. This is
 	 * required as the DSnPR registers are updated on vblank, and no vblank
 	 * will occur once the CRTC is stopped. Disabling planes when starting
@@ -688,6 +705,10 @@ static irqreturn_t rcar_du_crtc_irq(int irq, void *arg)
 	if (status & DSSR_FRM) {
 		drm_handle_vblank(rcrtc->crtc.dev, rcrtc->index);
 		rcar_du_crtc_finish_page_flip(rcrtc);
+
+		if (rcar_du_has(rcrtc->group->dev, RCAR_DU_FEATURE_CMM))
+			rcar_du_cmm_kick(rcrtc);
+
 		ret = IRQ_HANDLED;
 	}
 
@@ -789,6 +810,8 @@ int rcar_du_crtc_create(struct rcar_du_group *rgrp, unsigned int index)
 		return ret;
 	}
 
+	rcar_du_cmm_init(rcrtc);
+
 	return 0;
 }
 
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_crtc.h b/drivers/gpu/drm/rcar-du/rcar_du_crtc.h
index 3476515..d87fe21 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_crtc.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_crtc.h
@@ -54,6 +54,8 @@ struct rcar_du_crtc {
 	struct rcar_du_vsp *vsp;
 
 	int lvds_ch;
+
+	void *cmm_handle;
 };
 
 struct dpll_info {
@@ -89,4 +91,34 @@ int rcar_du_crtc_get(struct rcar_du_crtc *rcrtc);
 void rcar_du_crtc_put(struct rcar_du_crtc *rcrtc);
 void rcar_du_crtc_vbk_check(struct rcar_du_group *rgrp);
 
+
+/* DU-CMM functions */
+int rcar_du_cmm_start_stop(struct rcar_du_crtc *rcrtc, bool on);
+void rcar_du_cmm_kick(struct rcar_du_crtc *rcrtc);
+
+int rcar_du_cmm_lut_set(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+int rcar_du_cmm_clu_set(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+int rcar_du_cmm_hgo_get(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+int rcar_du_cmm_init(struct rcar_du_crtc *rcrtc);
+int rcar_du_cmm_hgo_set(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+int rcar_du_cmm_hgo_start(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+int rcar_du_cmm_wait_event(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+int rcar_du_cmm_config(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+
+int rcar_du_cmm_alloc(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+int rcar_du_cmm_free(struct drm_device *dev, void *data,
+			struct drm_file *file_priv);
+#ifdef CONFIG_PM_SLEEP
+int rcar_du_cmm_pm_suspend(struct rcar_du_crtc *rcrtc);
+int rcar_du_cmm_pm_resume(struct rcar_du_crtc *rcrtc);
+#endif /* CONFIG_PM_SLEEP */
+
 #endif /* __RCAR_DU_CRTC_H__ */
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_drv.c b/drivers/gpu/drm/rcar-du/rcar_du_drv.c
index 6290193..70fd476 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_drv.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_drv.c
@@ -101,7 +101,8 @@ static const struct rcar_du_device_info rcar_du_r8a7790_info = {
 static const struct rcar_du_device_info rcar_du_r8a7791_info = {
 	.gen = 2,
 	.features = RCAR_DU_FEATURE_CRTC_IRQ_CLOCK
-		  | RCAR_DU_FEATURE_EXT_CTRL_REGS,
+		  | RCAR_DU_FEATURE_EXT_CTRL_REGS
+		  | RCAR_DU_FEATURE_CMM,
 	.num_crtcs = 2,
 	.routes = {
 		/* R8A779[13] has one RGB output, one LVDS output and one
@@ -151,7 +152,8 @@ static const struct rcar_du_device_info rcar_du_r8a7795_info = {
 		  | RCAR_DU_FEATURE_EXT_CTRL_REGS
 		  | RCAR_DU_FEATURE_VSP1_SOURCE
 		  | RCAR_DU_FEATURE_GEN3_REGS
-		  | RCAR_DU_FEATURE_DIDSR2_REG,
+		  | RCAR_DU_FEATURE_DIDSR2_REG
+		  | RCAR_DU_FEATURE_CMM | RCAR_DU_FEATURE_CMM_LUT_DBUF,
 	.num_crtcs = 4,
 	.routes = {
 		/* R8A7795 has one RGB output, two HDMI outputs and one
@@ -188,7 +190,9 @@ static const struct rcar_du_device_info rcar_du_r8a7796_info = {
 	.features = RCAR_DU_FEATURE_CRTC_IRQ_CLOCK
 		  | RCAR_DU_FEATURE_EXT_CTRL_REGS
 		  | RCAR_DU_FEATURE_VSP1_SOURCE
-		  | RCAR_DU_FEATURE_GEN3_REGS,
+		  | RCAR_DU_FEATURE_GEN3_REGS
+		  | RCAR_DU_FEATURE_CMM | RCAR_DU_FEATURE_CMM_LUT_DBUF
+		  | RCAR_DU_FEATURE_CMM_CLU_DBUF,
 	.num_crtcs = 3,
 	.routes = {
 		/* R8A7796 has one RGB output, one LVDS output and one
@@ -490,6 +494,26 @@ static const struct drm_ioctl_desc rcar_du_ioctls[] = {
 		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
 	DRM_IOCTL_DEF_DRV(DRM_RCAR_DU_SCRSHOT, rcar_du_vsp_write_back,
 		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+
+	/* DU-CMM function */
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_SET_CLU, rcar_du_cmm_clu_set,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_SET_HGO, rcar_du_cmm_hgo_set,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_GET_HGO, rcar_du_cmm_hgo_get,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_START_HGO, rcar_du_cmm_hgo_start,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_WAIT_EVENT, rcar_du_cmm_wait_event,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_CONFIG, rcar_du_cmm_config,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_SET_LUT, rcar_du_cmm_lut_set,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_ALLOC, rcar_du_cmm_alloc,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
+	DRM_IOCTL_DEF_DRV(RCAR_DU_CMM_FREE, rcar_du_cmm_free,
+		DRM_UNLOCKED | DRM_CONTROL_ALLOW),
 };
 
 static const struct file_operations rcar_du_fops = {
@@ -576,6 +600,9 @@ static int rcar_du_pm_suspend(struct device *dev)
 	}
 #endif
 	for (i = 0; i < rcdu->num_crtcs; ++i) {
+		if (rcar_du_has(rcdu, RCAR_DU_FEATURE_CMM))
+			rcar_du_cmm_pm_suspend(&rcdu->crtcs[i]);
+
 		if (rcdu->crtcs[i].started)
 			rcar_du_crtc_suspend(&rcdu->crtcs[i]);
 	}
@@ -594,6 +621,9 @@ static int rcar_du_pm_resume_early(struct device *dev)
 
 	for (i = 0; i < rcdu->num_crtcs; ++i) {
 		rcar_du_crtc_resume(&rcdu->crtcs[i]);
+
+		if (rcar_du_has(rcdu, RCAR_DU_FEATURE_CMM))
+			rcar_du_cmm_pm_resume(&rcdu->crtcs[i]);
 	}
 
 #if IS_ENABLED(CONFIG_DRM_RCAR_LVDS)
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_drv.h b/drivers/gpu/drm/rcar-du/rcar_du_drv.h
index 267488f..b90481d 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_drv.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_drv.h
@@ -35,6 +35,10 @@ struct rcar_du_lvdsenc;
 #define RCAR_DU_FEATURE_GEN3_REGS	(1 << 3)	/* Use Gen3 registers */
 #define RCAR_DU_FEATURE_DIDSR2_REG	(1 << 4)	/* Has DIDSR2 register */
 
+#define RCAR_DU_FEATURE_CMM		(1 << 10)	/* Has DEFR7 register & CMM */
+#define RCAR_DU_FEATURE_CMM_LUT_DBUF	(1 << 11)	/* Has CMM LUT Double buffer */
+#define RCAR_DU_FEATURE_CMM_CLU_DBUF	(1 << 12)	/* Has CMM CLU Double buffer */
+
 #define RCAR_DU_QUIRK_ALIGN_128B	(1 << 0)	/* Align pitches to 128 bytes */
 #define RCAR_DU_QUIRK_LVDS_LANES	(1 << 1)	/* LVDS lanes 1 and 3 inverted */
 
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_group.c b/drivers/gpu/drm/rcar-du/rcar_du_group.c
index f48fc64..41e4c98 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_group.c
+++ b/drivers/gpu/drm/rcar-du/rcar_du_group.c
@@ -137,6 +137,11 @@ static void rcar_du_group_setup(struct rcar_du_group *rgrp)
 	if (rcdu->info->gen >= 3)
 		rcar_du_group_write(rgrp, DEFR10, DEFR10_CODE | DEFR10_DEFE10);
 
+	if (rcar_du_has(rgrp->dev, RCAR_DU_FEATURE_CMM)) {
+		rcar_du_group_write(rgrp, DEFR7,
+			DEFR7_CODE | DEFR7_CMME1 | DEFR7_CMME0);
+	}
+
 	/* Use DS1PR and DS2PR to configure planes priorities and connects the
 	 * superposition 0 to DU0 pins. DU1 pins will be configured dynamically.
 	 */
diff --git a/drivers/gpu/drm/rcar-du/rcar_du_regs.h b/drivers/gpu/drm/rcar-du/rcar_du_regs.h
index 63dad00..65d013d 100644
--- a/drivers/gpu/drm/rcar-du/rcar_du_regs.h
+++ b/drivers/gpu/drm/rcar-du/rcar_du_regs.h
@@ -200,6 +200,11 @@
 #define DEFR6_MLOS1		(1 << 2)
 #define DEFR6_DEFAULT		(DEFR6_CODE | DEFR6_TCNE1)
 
+#define DEFR7			0x000ec
+#define DEFR7_CODE		(0x7779 << 16)
+#define DEFR7_CMME1		(1 << 6)
+#define DEFR7_CMME0		(1 << 4)
+
 /* -----------------------------------------------------------------------------
  * R8A7790-only Control Registers
  */
@@ -550,4 +555,92 @@
 #define GCBCR			0x11098
 #define BCBCR			0x1109c
 
+
+/* -----------------------------------------------------------------------------
+ * DU Color Management Module Registers
+ */
+
+#define CMM0_ADDR 0xFEA40000
+#define CMM1_ADDR 0xFEA50000
+#define CMM2_ADDR 0xFEA60000
+#define CMM3_ADDR 0xFEA70000
+
+#define CMM_SIZE  0x00001000
+
+#define CMM_LUT_CTRL		0x0000
+ #define CMM_LUT_CTRL_EN	(1 << 0)
+#define CMM_CLU_CTRL		0x0100
+ #define CMM_CLU_CTRL_EN	(1 << 0)
+ #define CMM_CLU_CTRL_MVS	(1 << 24)
+ #define CMM_CLU_CTRL_AAI	(1 << 28)
+#define CMM_CTL0		0x0180
+#define CM2_CTL0		CMM_CTL0
+ #define CMM_CTL0_CLUDB		(1 << 24)
+ #define CMM_CTL0_HISTS		(1 << 20)
+ #define CMM_CTL0_TM1_MASK		(3 << 16)
+ #define CMM_CTL0_TM1_BT601_YC240	(0 << 16)
+ #define CMM_CTL0_TM1_BT601_YC255	(1 << 16)
+ #define CMM_CTL0_TM1_BT709_RG255	(2 << 16)
+ #define CMM_CTL0_TM1_BT709_RG235	(3 << 16)
+ #define CMM_CTL0_TM0_MASK		(3 << 16)
+ #define CMM_CTL0_TM0_BT601_YC240	(0 << 12)
+ #define CMM_CTL0_TM0_BT601_YC255	(1 << 12)
+ #define CMM_CTL0_TM0_BT709_RG255	(2 << 12)
+ #define CMM_CTL0_TM0_BT709_RG235	(3 << 12)
+ #define CMM_CTL0_TM_BT601_YC240	(CMM_CTL0_TM1_BT601_YC240 | CMM_CTL0_TM0_BT601_YC240)
+ #define CMM_CTL0_TM_BT601_YC255	(CMM_CTL0_TM1_BT601_YC255 | CMM_CTL0_TM0_BT601_YC255)
+ #define CMM_CTL0_TM_BT709_RG255	(CMM_CTL0_TM1_BT709_RG255 | CMM_CTL0_TM0_BT709_RG255)
+ #define CMM_CTL0_TM_BT709_RG235	(CMM_CTL0_TM1_BT709_RG235 | CMM_CTL0_TM0_BT709_RG235)
+ #define CMM_CTL0_CLUDB		(1 << 24)
+ #define CMM_CTL0_YC		(1 << 8)
+ #define CMM_CTL0_VPOL		(1 << 4)
+ #define CMM_CTL0_DBUF		(1 << 0)
+#define CMM_CTL1		0x0184
+#define CM2_CTL1		CMM_CTL1
+ #define CMM_CTL1_BFS		(1 << 0)
+#define CMM_CTL2		0x0188
+#define CMM_HGO_OFFSET		0x0200
+#define CMM_HGO_SIZE		0x0204
+#define CMM_HGO_MODE		0x0208
+ #define CMM_HGO_MODE_MASK	(0xFF)
+ #define CMM_HGO_MODE_MAXRGB	(1 << 7)
+ #define CMM_HGO_MODE_OFSB_R	(1 << 6)
+ #define CMM_HGO_MODE_OFSB_G	(1 << 5)
+ #define CMM_HGO_MODE_OFSB_B	(1 << 4)
+ #define CMM_HGO_MODE_HRATIO_NO_SKIPP	(0 << 2)
+ #define CMM_HGO_MODE_HRATIO_HALF_SKIPP	(1 << 2)
+ #define CMM_HGO_MODE_HRATIO_QUARTER_SKIPP	(2 << 2)
+ #define CMM_HGO_MODE_VRATIO_NO_SKIPP	(0 << 0)
+ #define CMM_HGO_MODE_VRATIO_HALF_SKIPP	(1 << 0)
+ #define CMM_HGO_MODE_VRATIO_QUARTER_SKIPP	(2 << 0)
+#define CMM_HGO_LB_TH		0x020C
+#define CMM_HGO_LB0_H		0x0200
+#define CMM_HGO_LB0_V		0x0214
+#define CMM_HGO_LB1_H		0x0218
+#define CMM_HGO_LB1_V		0x021C
+#define CMM_HGO_LB2_H		0x0220
+#define CMM_HGO_LB2_V		0x0224
+#define CMM_HGO_LB3_H		0x0228
+#define CMM_HGO_LB3_V		0x022C
+#define CMM_HGO_R_HISTO_n(n)	(0x0230 + (n * 4))
+#define CMM_HGO_R_MAXMIN	0x0330
+#define CMM_HGO_R_SUM		0x0334
+#define CMM_HGO_R_LB_DET	0x0338
+#define CMM_HGO_G_HISTO_n(n)	(0x0340 + (n * 4))
+#define CMM_HGO_G_MAXMIN	0x0440
+#define CMM_HGO_G_SUM		0x0444
+#define CMM_HGO_G_LB_DET	0x0448
+#define CMM_HGO_B_HISTO_n(n)	(0x0450 + (4 * n))
+#define CMM_HGO_B_MAXMIN	0x0550
+#define CMM_HGO_B_SUM		0x0554
+#define CMM_HGO_B_LB_DET	0x0558
+#define CMM_HGO_REGRST		0x05FC
+ #define CMM_HGO_REGRST_RCLEA	(1 << 0)
+#define CMM_LUT_TBLA_n(n)	(0x0600 + (n * 4))
+#define CMM_CLU_ADDR		0x0A00
+#define CMM_CLU_DATA		0x0A04
+#define CMM_LUT_TBLB_n(n)	(0x0B00 + (n * 4))
+#define CMM_CLU_ADDR2		0x0F00
+#define CMM_CLU_DATA2		0x0F04
+
 #endif /* __RCAR_DU_REGS_H__ */
diff --git a/include/uapi/drm/rcar_du_drm.h b/include/uapi/drm/rcar_du_drm.h
index 43420db..92af22a 100644
--- a/include/uapi/drm/rcar_du_drm.h
+++ b/include/uapi/drm/rcar_du_drm.h
@@ -27,10 +27,109 @@ struct rcar_du_screen_shot {
 	unsigned int	height;
 };
 
+
+/* DRM_RCAR_DU_CMM_SET_CLU: DU-CMM set CLU */
+/* DRM_RCAR_DU_CMM_GET_HGO: DU-CMM get histogram */
+struct rcar_du_cmm_table {
+	unsigned int	crtc_id;
+	unsigned int	buff;	/* set DRM_RCAR_DU_CMM_ALLOC handle */
+	unsigned int	buff_len;
+	unsigned long	user_data;
+};
+
+/* DRM_RCAR_DU_CMM_SET_HGO: DU-CMM set HGO */
+struct rcar_du_cmm_hgo_config {
+	unsigned int	crtc_id;
+	unsigned int	x_offset;
+	unsigned int	y_offset;
+	unsigned int	width;
+	unsigned int	height;
+	unsigned int	mode;
+	unsigned int	ctrl;
+};
+
+/* DRM_RCAR_DU_CMM_WAIT_EVENT: DU-CMM get event */
+struct rcar_du_cmm_event {
+	unsigned int	crtc_id;
+	unsigned int	event;
+	unsigned long	callback_data;
+};
+
+/* DRM_RCAR_DU_CMM_CONFIG: DU-CMM set config */
+struct rcar_du_cmm_config {
+	unsigned int	crtc_id;
+	int		csc;
+	int		lut_buf;
+	int		clu_buf;
+};
+
+/* DRM_RCAR_DU_CMM_ALLOC: DU-CMM alloc cma buffer */
+/* DRM_RCAR_DU_CMM_FREE: DU-CMM free cma buffer */
+struct rcar_du_cmm_buf {
+	size_t		size;		/* in */
+	uint64_t	mmap_offset;	/* out */
+	uint64_t	phy_addr;	/* out */
+	uint32_t	handle;		/* out */
+};
+
+/* DRM_RCAR_DU_CMM_WAIT_EVENT: DU-CMM done event */
+#define CMM_EVENT_CLU_DONE	1
+#define CMM_EVENT_HGO_DONE	2
+#define CMM_EVENT_HGO_START	3
+#define CMM_EVENT_LUT_DONE	4
+
+
+
+/* DRM_RCAR_DU_CMM_SET_HGO: DU-CMM set HGO mode */
+#define HGO_MODE_MAXRGB			(1 << 7)
+#define HGO_MODE_OFSB_R			(1 << 6)
+#define HGO_MODE_OFSB_G			(1 << 5)
+#define HGO_MODE_OFSB_B			(1 << 4)
+#define HGO_MODE_HRATIO_NO_SKIPP	(0 << 2)
+#define HGO_MODE_HRATIO_HALF_SKIPP	(1 << 2)
+#define HGO_MODE_HRATIO_QUARTER_SKIPP	(2 << 2)
+#define HGO_MODE_VRATIO_NO_SKIPP	(0 << 0)
+#define HGO_MODE_VRATIO_HALF_SKIPP	(1 << 0)
+#define HGO_MODE_VRATIO_QUARTER_SKIPP	(2 << 0)
+
+#define HGO_CTRL_BEFORE_CLU		(0 << 0)
+#define HGO_CTRL_BEFORE_LUT		(1 << 0)
+
+
+/* DRM_RCAR_DU_CMM_CONFIG: DU-CMM config */
+#define CSC_CONVERT_NONE		0
+#define CSC_CONVERT_BT601_YCbCr240	1
+#define CSC_CONVERT_BT601_YCbCr255	2
+#define CSC_CONVERT_BT709_RGB255	3
+#define CSC_CONVERT_BT709_RGB235	4
+
+#define LUT_DOUBLE_BUFFER_AUTO		0
+#define LUT_DOUBLE_BUFFER_A		1
+#define LUT_DOUBLE_BUFFER_B		2
+#define LUT_SINGLE_BUFFER		3
+
+#define CLU_DOUBLE_BUFFER_AUTO		0
+#define CLU_DOUBLE_BUFFER_A		1
+#define CLU_DOUBLE_BUFFER_B		2
+#define CLU_SINGLE_BUFFER		3
+
+
 /* rcar-du + vspd specific ioctls */
 #define DRM_RCAR_DU_SET_VMUTE		0
 #define DRM_RCAR_DU_SCRSHOT		4
 
+/* DU-CMM ioctl */
+#define DRM_RCAR_DU_CMM_FUNC_BASE	(DRM_RCAR_DU_SCRSHOT + 1)
+#define DRM_RCAR_DU_CMM_SET_CLU		(DRM_RCAR_DU_CMM_FUNC_BASE + 0)
+#define DRM_RCAR_DU_CMM_SET_HGO		(DRM_RCAR_DU_CMM_FUNC_BASE + 1)
+#define DRM_RCAR_DU_CMM_GET_HGO		(DRM_RCAR_DU_CMM_FUNC_BASE + 2)
+#define DRM_RCAR_DU_CMM_START_HGO	(DRM_RCAR_DU_CMM_FUNC_BASE + 3)
+#define DRM_RCAR_DU_CMM_WAIT_EVENT	(DRM_RCAR_DU_CMM_FUNC_BASE + 4)
+#define DRM_RCAR_DU_CMM_CONFIG		(DRM_RCAR_DU_CMM_FUNC_BASE + 5)
+#define DRM_RCAR_DU_CMM_SET_LUT		(DRM_RCAR_DU_CMM_FUNC_BASE + 6)
+#define DRM_RCAR_DU_CMM_ALLOC		(DRM_RCAR_DU_CMM_FUNC_BASE + 7)
+#define DRM_RCAR_DU_CMM_FREE		(DRM_RCAR_DU_CMM_FUNC_BASE + 8)
+
 #define DRM_IOCTL_DRM_RCAR_DU_SET_VMUTE \
 	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_SET_VMUTE, \
 		struct rcar_du_vmute)
@@ -38,5 +137,41 @@ struct rcar_du_screen_shot {
 #define DRM_IOCTL_DRM_RCAR_DU_SCRSHOT \
 	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_SCRSHOT, \
 		struct rcar_du_screen_shot)
+/* DU-CMM ioctl */
+#define DRM_IOCTL_RCAR_DU_CMM_SET_CLU \
+	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_SET_CLU, \
+		struct rcar_du_cmm_table)
+
+#define DRM_IOCTL_RCAR_DU_CMM_SET_HGO \
+	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_SET_HGO, \
+		struct rcar_du_cmm_hgo_config)
+
+#define DRM_IOCTL_RCAR_DU_CMM_GET_HGO \
+	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_GET_HGO, \
+		struct rcar_du_cmm_table)
+
+#define DRM_IOCTL_RCAR_DU_CMM_START_HGO \
+	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_START_HGO, \
+		int)
+
+#define DRM_IOCTL_RCAR_DU_CMM_WAIT_EVENT \
+	DRM_IOWR(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_WAIT_EVENT, \
+		struct rcar_du_cmm_event)
+
+#define DRM_IOCTL_RCAR_DU_CMM_CONFIG \
+	DRM_IOWR(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_CONFIG, \
+		struct rcar_du_cmm_config)
+
+#define DRM_IOCTL_RCAR_DU_CMM_SET_LUT \
+	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_SET_LUT, \
+		struct rcar_du_cmm_table)
+
+#define DRM_IOCTL_RCAR_DU_CMM_ALLOC \
+	DRM_IOWR(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_ALLOC, \
+		struct rcar_du_cmm_buf)
+
+#define DRM_IOCTL_RCAR_DU_CMM_FREE \
+	DRM_IOW(DRM_COMMAND_BASE + DRM_RCAR_DU_CMM_FREE, \
+		struct rcar_du_cmm_buf)
 
 #endif /* __RCAR_DU_DRM_H__ */
-- 
1.9.1

